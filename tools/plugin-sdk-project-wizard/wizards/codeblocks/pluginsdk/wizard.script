////////////////////////////////////////////////////////////////////////////////
//
// Plugin-SDK project wizard
//
////////////////////////////////////////////////////////////////////////////////

gGameSA <- false;
gGameVC <- false;
gGameIII <- false;
gPluginName <- _T("");
gClassName <- _T("");
gCleoPlugin <- false;
gCleoSDK <- false;
gDirectX <- false;
gLACompatibility <- false;
gOutputDirectory <- _T("");
gReleaseIncludeDirs <- _T("");
gReleaseLibraryDirs <- _T("");
gReleaseDependencies <- _T("");
gReleaseDefinitions <- _T("");
gDebugSettingsSameAsRelease <- true;
gDebugIncludeDirs <- _T("");
gDebugLibraryDirs <- _T("");
gDebugDependencies <- _T("");
gDebugDefinitions <- _T("");
gPluginSdkDir <- _T("");
gAsiPluginsGTASADir <- _T("");
gAsiPluginsGTAVCDir <- _T("");
gAsiPluginsGTA3Dir <- _T("");
gCleoPluginsGTASADir <- _T("");
gCleoPluginsGTAVCDir <- _T("");
gCleoPluginsGTA3Dir <- _T("");
gCleoSdkGTASADir <- _T("");
gCleoSdkGTAVCDir <- _T("");
gCleoSdkGTA3Dir <- _T("");
gDirectXDir <- _T("");
gRwD3d9Dir <- _T("");

function BeginWizard()
{
    Wizard.AddProjectPathPage();
    Wizard.AddPage(_T("basicSetup"));
    Wizard.AddPage(_T("releaseSettings"));
    Wizard.AddPage(_T("debugSettings"));
    Wizard.AddPage(_T("pathsSetup"));
}

function IsLibraryExtension(ext)
{
    local extLower = ext.Lower();
    return extLower.Matches(_T("asi")) ||
           extLower.Matches(_T("cleo")) ||
           extLower.Matches(_T("flt")) ||
           extLower.Matches(_T("dll")) ||
           extLower.Matches(_T("sf"));
}

function GetFileNameExtension(filename)
{
    local lastDotPosition = -1;
    for (local i = 0; i < filename.Length(); i++ )
    {
        if (filename.GetChar(i) == '.')
        {
            lastDotPosition = i;
        }
    }
    if (lastDotPosition != -1)
    {
        local extensionLength = filename.Length() - lastDotPosition - 1;
        if (extensionLength > 0)
        {
            return filename.Mid(lastDotPosition, extensionLength);
        }
    }
    return _T("");
}

function RemoveTrailingSpaces(str)
{
    local len = str.Length();
    if (len > 0)
    {
        local strEndPos = len;
        for (local i = len - 1; i >= 0; i -= 1)
        {
            local c = str.GetChar(i);
            if (c == ' ' || c == '\t')
            {
                strEndPos = i;
            }
            else
            {
                return str.Mid(0, strEndPos);
            }
        }
    }
    return _T("");
}

function IsQuotesStartOrEnd(line, pos)
{
    if (line.GetChar(pos) == '"')
    {
        if (pos > 0)
        {
            local slashesCount = 0;
            for (local i = pos - 1; i >= 0; i -= 1)
            {
                local c = line.GetChar(i);
                if (c == '\\')
                {
                    slashesCount += 1;
                }
                else
                {
                    return slashesCount % 2 == 0;
                }
            }
            return slashesCount % 2 == 0;
        }
        return true;
    }
    return false;
}

function SplitListLine(line)
{
    local entry = _T("");
    local ary = ::wxArrayString();
    local insideQuotes = false;
    for (local i = 0; i < line.Length(); i += 1)
    {
        local c = line.GetChar(i);
        if (!entry.IsEmpty())
        {
            if (insideQuotes)
            {
                if (IsQuotesStartOrEnd(line, i))
                {
                    insideQuotes = false;
                    entry += _T("\"\\\"");
                }
                else
                {
                    entry.AddChar(c);
                }
            }
            else
            {
                if (c == ';' || c == ',' || c == '\n' || c == '\r')
                {
                    ary.Add(RemoveTrailingSpaces(entry), 1);
                    entry = _T("");
                }
                else
                {
                    if (IsQuotesStartOrEnd(line, i))
                    {
                        insideQuotes = true;
                        entry += _T("\"\\\"");
                    }
                    else
                    {
                        entry.AddChar(c);
                    }
                }
            }
        }
        else
        {
            if (c != ';' && c != ',' && c != '\n' && c != '\r' && c != '\t' && c != ' ')
            {
                if (IsQuotesStartOrEnd(line, i))
                {
                    insideQuotes = true;
                    entry += _T("\"\\\"");
                }
                else
                {
                    entry.AddChar(c);
                }
            }
        }
    }
    if (!entry.IsEmpty())
    {
        ary.Add(RemoveTrailingSpaces(entry), 1);
    }
    return ary;
}

function NormalisePath(path)
{
    local newPath = path + _T("");
    newPath.Replace(_T("/"), _T("\\"), true);
    local len = newPath.Length();
    if (len > 0)
    {
        local c = newPath.GetChar(len - 1);
        if (c != '\\')
        {
            newPath.AddChar('\\');
        }
    }
    return newPath;
}

function FormatName(line, defaultValue1, defaultValue2, gameId, gameOutputDir, configName)
{
    local newLine = line + _T("");
    if (newLine.IsEmpty())
    {
        if (defaultValue1.IsEmpty())
        {
            return defaultValue2;
        }
        return defaultValue1;
    }
    newLine.Replace(_T("$projectname$"), GetFixedProjectName(Wizard.GetProjectName()), true);
    newLine.Replace(_T("$PROJECTNAME$"), GetFixedProjectName(Wizard.GetProjectName()), true);
    newLine.Replace(_T("$projectdir$"), _T("$(PROJECT_DIR)"), true);
    newLine.Replace(_T("$PROJECTDIR$"), _T("$(PROJECT_DIR)"), true);
    if (!configName.IsEmpty())
    {
        newLine.Replace(_T("$config$"), configName);
        newLine.Replace(_T("$CONFIG$"), configName);
    }
    if (!gameId.IsEmpty())
    {
        newLine.Replace(_T("$game$"), gameId, true);
        newLine.Replace(_T("$GAME$"), gameId, true);
        newLine.Replace(_T("$gamelow$"), gameId.Lower(), true);
        newLine.Replace(_T("$GAMELOW$"), gameId.Lower(), true);
        if (gameId.Matches(_T("SA")))
        {
            newLine.Replace(_T("$gamename$"), _T("San Andreas"), true);
            newLine.Replace(_T("$GAMENAME$"), _T("San Andreas"), true);
            newLine.Replace(_T("$gamealt$"), _T("SA"), true);
            newLine.Replace(_T("$GAMEALT$"), _T("SA"), true);
        }
        else if (gameId.Matches(_T("VC")))
        {
            newLine.Replace(_T("$gamename$"), _T("Vice City"), true);
            newLine.Replace(_T("$GAMENAME$"), _T("Vice City"), true);
            newLine.Replace(_T("$gamealt$"), _T("VC"), true);
            newLine.Replace(_T("$GAMEALT$"), _T("VC"), true);
        }
        else
        {
            newLine.Replace(_T("$gamename$"), _T("3"), true);
            newLine.Replace(_T("$GAMENAME$"), _T("3"), true);
            newLine.Replace(_T("$gamealt$"), _T("3"), true);
            newLine.Replace(_T("$GAMEALT$"), _T("3"), true);
        }
    }
    if (!gameOutputDir.IsEmpty())
    {
        newLine.Replace(_T("$gameoutputdir$"), gameOutputDir, true);
        newLine.Replace(_T("$GAMEOUTPUTDIR$"), gameOutputDir, true);
    }
    return newLine;
}

function GetConfigName(isDebug)
{
    if (isDebug)
    {
        return _T("Debug");
    }
    return _T("Release");
}

function AddAdditionalToTarget(target, isDebug, gameAbbr, defaultOutputDir, includeDirs, libraryDirs, libraries, defines)
{
    local ary = SplitListLine(includeDirs);
    for (local i = 0; i < ary.GetCount(); i += 1)
    {
        target.AddIncludeDir(FormatName(ary.Item(i), _T(""), _T(""), gameAbbr, defaultOutputDir, GetConfigName(isDebug)));
    }
    ary = SplitListLine(libraryDirs);
    for (local i = 0; i < ary.GetCount(); i += 1)
    {
        target.AddLibDir(FormatName(ary.Item(i), _T(""), _T(""), gameAbbr, defaultOutputDir, GetConfigName(isDebug)));
    }
    ary = SplitListLine(libraries);
    for (local i = 0; i < ary.GetCount(); i += 1)
    {
        target.AddLinkLib(FormatName(ary.Item(i), _T(""), _T(""), gameAbbr, defaultOutputDir, GetConfigName(isDebug)));
    }
    ary = SplitListLine(defines);
    for (local i = 0; i < ary.GetCount(); i += 1)
    {
        target.AddCompilerOption(_T("-D") + FormatName(ary.Item(i), _T(""), _T(""), gameAbbr, defaultOutputDir, GetConfigName(isDebug)));
    }
}

function CreateNewBuildTarget(project, targetName, gameId, isDebug)
{
    local gameAbbr = gameId.Upper();
    local gameAbbrLow = gameId.Lower();
    local baseTargetName = Wizard.GetReleaseName(); 
    if (isDebug)
    {
        baseTargetName = Wizard.GetDebugName();
    }
    local target = project.DuplicateBuildTarget(baseTargetName, targetName);
    if (IsNull(target))
    {
        return;
    }
    target.SetTargetType(ttDynamicLib);
    target.SetCreateStaticLib(false);
    target.SetCreateDefFile(false);
    target.SetWorkingDir(_T("."));
    target.SetObjectOutput(_T("obj"));
    target.SetTargetFilenameGenerationPolicy(tgfpNone, tgfpNone);
    target.AddCompilerOption(_T("-m32"));
    local configName = GetConfigName(isDebug);
    if (isDebug)
    {
        DebugSymbolsOn(target, Wizard.GetCompilerID());
        target.AddCompilerOption(_T("-D_DEBUG"));
    }
    else
    {
        OptimizationsOn(target, Wizard.GetCompilerID());
        target.AddCompilerOption(_T("-DNDEBUG"));
    }
    
    local defaultOutputDir1;
    local defaultOutputDir2;
    if (gCleoPlugin)
    {
        defaultOutputDir2 = _T("$(GTA_") + gameAbbr + _T("_CLEO_DIR)");
        if (gameAbbr.Matches(_T("SA")))
        {
            defaultOutputDir1 = gCleoPluginsGTASADir + _T("");
        }
        else if (gameAbbr.Matches(_T("VC")))
        {
            defaultOutputDir1 = gCleoPluginsGTAVCDir + _T("");
        }
        else
        {
            defaultOutputDir1 = gCleoPluginsGTA3Dir + _T("");
        }
    }
    else
    {
        defaultOutputDir2 = _T("$(GTA_") + gameAbbr + _T("_ASI_DIR)");
        if (gameAbbr.Matches(_T("SA")))
        {
            defaultOutputDir1 = gAsiPluginsGTASADir + _T("");
        }
        else if (gameAbbr.Matches(_T("VC")))
        {
            defaultOutputDir1 = gAsiPluginsGTAVCDir + _T("");
        }
        else
        {
            defaultOutputDir1 = gAsiPluginsGTA3Dir + _T("");
        }
    }
    
    local outputDir = FormatName(gOutputDirectory, defaultOutputDir1, defaultOutputDir2, gameAbbr, defaultOutputDir1, configName);
    outputDir = NormalisePath(outputDir);
    local targetName = FormatName(gPluginName, _T("$(PROJECT_NAME)"), _T(""), gameAbbr, _T(""), configName);
    local targetExt = _T("asi");
    local fileExt = GetFileNameExtension(targetName);
    if (!fileExt.IsEmpty() && IsLibraryExtension(fileExt))
    {
        targetExt = fileExt + _T("");
        targetName = targetName.Mid(0, targetName.Length() - fileExt.Length());
    }
    else
    {
        if (gCleoPlugin)
        {
            targetExt = _T("cleo");
        }
    }
    if (isDebug)
    {
        targetName += _T("_d");
    }
    target.SetOutputFilename(outputDir + targetName + _T(".") + targetExt);
    local pluginSdkDir = FormatName(gPluginSdkDir, _T("$(PLUGIN_SDK_DIR)"), _T(""), gameAbbr, defaultOutputDir1, configName);
    pluginSdkDir = NormalisePath(pluginSdkDir);
    target.AddIncludeDir(pluginSdkDir + _T("plugin_") + gameAbbrLow + _T("\\"));
    target.AddIncludeDir(pluginSdkDir + _T("plugin_") + gameAbbrLow + _T("\\game_") + gameAbbrLow + _T("\\"));
    target.AddLibDir(pluginSdkDir + _T("output\\mingw\\lib\\"));
    local pathsLibName = _T("libpaths");
    local pluginLibName = _T("libplugin");
    if (!gameAbbr.Matches(_T("SA")))
    {
        pluginLibName += _T("_") + gameAbbrLow;
    }
    if (isDebug)
    {
        pathsLibName += _T("_d");
        pluginLibName += _T("_d");
    }
    target.AddLinkLib(pathsLibName);
    target.AddLinkLib(pluginLibName);
    
    if (gameAbbr.Matches(_T("SA")))
    {
        target.AddCompilerOption(_T("-DGTASA"));
        target.AddCompilerOption(_T("-DGTAGAME_NAME=\"\\\"San Andreas\"\\\""));
        target.AddCompilerOption(_T("-DGTAGAME_ABBR=\"\\\"SA\"\\\""));
        target.AddCompilerOption(_T("-DGTAGAME_ABBRLOW=\"\\\"sa\"\\\""));
        target.AddCompilerOption(_T("-DGTAGAME_PROTAGONISTNAME=\"\\\"CJ\"\\\""));
        target.AddCompilerOption(_T("-DGTAGAME_CITYNAME=\"\\\"San Andreas\"\\\""));
    }
    else if (gameAbbr.Matches(_T("VC")))
    {
        target.AddCompilerOption(_T("-DGTAVC"));
        target.AddCompilerOption(_T("-DGTAGAME_NAME=\"\\\"Vice City\"\\\""));
        target.AddCompilerOption(_T("-DGTAGAME_ABBR=\"\\\"VC\"\\\""));
        target.AddCompilerOption(_T("-DGTAGAME_ABBRLOW=\"\\\"vc\"\\\""));
        target.AddCompilerOption(_T("-DGTAGAME_PROTAGONISTNAME=\"\\\"Tommy\"\\\""));
        target.AddCompilerOption(_T("-DGTAGAME_CITYNAME=\"\\\"Vice City\"\\\""));
    }
    else
    {
        target.AddCompilerOption(_T("-DGTA3"));
        target.AddCompilerOption(_T("-DGTAGAME_NAME=\"\\\"3\"\\\""));
        target.AddCompilerOption(_T("-DGTAGAME_ABBR=\"\\\"3\"\\\""));
        target.AddCompilerOption(_T("-DGTAGAME_ABBRLOW=\"\\\"3\"\\\""));
        target.AddCompilerOption(_T("-DGTAGAME_PROTAGONISTNAME=\"\\\"Claude\"\\\""));
        target.AddCompilerOption(_T("-DGTAGAME_CITYNAME=\"\\\"Liberty City\"\\\""));
    }
    
    if (gDirectX)
    {
        local dxSdkDir = FormatName(gDirectXDir, _T("$(DIRECTX9_SDK_DIR)"), _T(""), gameAbbr, defaultOutputDir1, configName);
        dxSdkDir = NormalisePath(dxSdkDir);
        target.AddIncludeDir(dxSdkDir + _T("Include\\"));
        target.AddLibDir(dxSdkDir + _T("Lib\\x86\\"));
        target.AddLinkLib(_T("d3d9"));
        target.AddLinkLib(_T("d3dx9"));
        if (gameAbbr.Matches(_T("VC")) || gameAbbr.Matches(_T("III")))
        {
            local rwD3D9Dir = FormatName(gRwD3d9Dir, _T("$(RWD3D9_DIR)"), _T(""), gameAbbr, defaultOutputDir1, configName);
            rwD3D9Dir = NormalisePath(rwD3D9Dir);
            target.AddIncludeDir(rwD3D9Dir + _T("source\\"));
            target.AddLibDir(rwD3D9Dir + _T("libs\\"));
            target.AddLinkLib(_T("rwd3d9"));
        }
    }
    if (gCleoSDK)
    {
        local cleoSdkDir = FormatName(gCleoSdkGTASADir, _T("$(CLEO_SDK_") + gameAbbr + _T("_DIR)"), _T(""), gameAbbr, defaultOutputDir1, configName);
        cleoSdkDir = NormalisePath(cleoSdkDir);
        target.AddIncludeDir(cleoSdkDir);
        target.AddLibDir(cleoSdkDir);
        if (gameAbbr.Matches(_T("SA")))
        {
            target.AddLinkLib(_T("cleo"));
        }
        else
        {
            target.AddLinkLib(gameAbbr + _T(".CLEO"));
        }
    }
    if (gLACompatibility)
    {
        target.AddCompilerOption(_T("-D_PLUGIN_LA_COMP"));
    }
    
    if (!isDebug || gDebugSettingsSameAsRelease)
    {
        AddAdditionalToTarget(target, isDebug, gameAbbr, defaultOutputDir1, gReleaseIncludeDirs, gReleaseLibraryDirs, gReleaseDependencies, gReleaseDefinitions);
    }
    else
    {
        AddAdditionalToTarget(target, isDebug, gameAbbr, defaultOutputDir1, gDebugIncludeDirs, gDebugLibraryDirs, gDebugDependencies, gDebugDefinitions);
    }
}

function SetupProject(project)
{
    if (gGameSA)
    {
        CreateNewBuildTarget(project, _T("GTASA Release"), _T("SA"), false);
        CreateNewBuildTarget(project, _T("GTASA Debug"), _T("SA"), true);
    }
    if (gGameVC)
    {
        CreateNewBuildTarget(project, _T("GTAVC Release"), _T("VC"), false);
        CreateNewBuildTarget(project, _T("GTAVC Debug"), _T("VC"), true);
    }
    if (gGameIII)
    {
        CreateNewBuildTarget(project, _T("GTA3 Release"), _T("III"), false);
        CreateNewBuildTarget(project, _T("GTA3 Debug"), _T("III"), true);
    }
    project.RemoveBuildTarget(Wizard.GetDebugName());
    project.RemoveBuildTarget(Wizard.GetReleaseName());
    return true;
}

function GetGeneratedFile(file_index)
{
    if (file_index == 0)
    {
        local projname = GetFixedProjectName(Wizard.GetProjectName());
        local className = FormatName(gClassName, projname, _T(""), _T(""), _T(""), _T(""));
        className = GetFixedProjectName(className);
        local instanceName;
        if (className.GetChar(0) >= 'A' && className.GetChar(0) <= 'Z')
        {
            local lowerLetter = _T("");
            lowerLetter.AddChar(className.GetChar(0));
            lowerLetter = lowerLetter.Lower();
            instanceName = lowerLetter + className.Mid(1, className.Length() - 1);
        }
        else
        {
            if (className.GetChar(0) == '_')
            {
                instanceName = className + _T("_inst");
            }
            else
            {
                instanceName = _T("_") + className;
            }
        }
        local path;
        if (gCleoPlugin && gCleoSDK && gGameSA && !gGameVC && !gGameIII)
        {
            path = Wizard.FindTemplateFile(_T("pluginsdk/files/Main.Cleo.SA.cpp"));
        }
        else
        {
            path = Wizard.FindTemplateFile(_T("pluginsdk/files/Main.Asi.cpp"));
        }
        local code = IO.ReadFileContents(path);
        code.Replace(_T("$projname$"), projname);
        code.Replace(_T("$classname$"), className);
        code.Replace(_T("$classinstancename$"), instanceName);
        return projname + _T(".cpp;") + code;
    }
    return _T("");
}

////////////////////////////////////////////////////////////////////////////////
//
// Basic setup page
//
////////////////////////////////////////////////////////////////////////////////

function AnyGameChecked()
{
    return Wizard.IsCheckboxChecked(_T("chkGTASA")) || Wizard.IsCheckboxChecked(_T("chkGTAVC")) || Wizard.IsCheckboxChecked(_T("chkGTA3"));
}

function BasicSetupSwitchComponents(enable)
{
    Wizard.EnableWindow(_T("sttPluginName"), enable);
    Wizard.EnableWindow(_T("txtPluginName"), enable);
    Wizard.EnableWindow(_T("sttClassName"), enable);
    Wizard.EnableWindow(_T("txtClassName"), enable);
    Wizard.EnableWindow(_T("chkCleoPlugin"), enable);
    Wizard.EnableWindow(_T("chkCleoSdk"), enable);
    Wizard.EnableWindow(_T("chkUseDirectX"), enable);
    Wizard.EnableWindow(_T("chkLACompatibility"), enable);
    Wizard.EnableWindow(_T("sttOutputDirectory"), enable);
    Wizard.EnableWindow(_T("txtOutputDirectory"), enable);
    Wizard.EnableWindow(_T("btnGameFolder"), enable);
    Wizard.EnableWindow(_T("btnProjectFolder"), enable);
}

function BasicSetupCheckForComponentsSwitch(thisCheckbox, secondCheckbox, thirdCheckbox)
{
    if (Wizard.IsCheckboxChecked(thisCheckbox))
    {
        if (!Wizard.IsCheckboxChecked(secondCheckbox) && !Wizard.IsCheckboxChecked(thirdCheckbox))
        {
            BasicSetupSwitchComponents(true);
        }
    }
    else
    {
        if (!Wizard.IsCheckboxChecked(secondCheckbox) && !Wizard.IsCheckboxChecked(thirdCheckbox))
        {
            BasicSetupSwitchComponents(false);
        }
    }
}

function OnClick_chkGTASA()
{
    BasicSetupCheckForComponentsSwitch(_T("chkGTASA"), _T("chkGTAVC"), _T("chkGTA3"));
}

function OnClick_chkGTAVC()
{
    BasicSetupCheckForComponentsSwitch(_T("chkGTAVC"), _T("chkGTASA"), _T("chkGTA3"));
}

function OnClick_chkGTA3()
{
    BasicSetupCheckForComponentsSwitch(_T("chkGTA3"), _T("chkGTASA"), _T("chkGTAVC"));
}

function OnClick_chkCleoPlugin()
{
    Wizard.CheckCheckbox(_T("chkCleoSdk"), Wizard.IsCheckboxChecked(_T("chkCleoPlugin")));
}

function OnClick_btnGameFolder()
{
    Wizard.SetTextControlValue(_T("txtOutputDirectory"), _T("$gameoutputdir$"));
}

function OnClick_btnProjectFolder()
{
    Wizard.SetTextControlValue(_T("txtOutputDirectory"), _T("$projectdir$\\output"));
}

function OnLeave_basicSetup(forward)
{
    if (forward && !AnyGameChecked())
    {
        ShowWarning(_T("Please select target game(s)"));
        return false;
    }
    gGameSA = Wizard.IsCheckboxChecked(_T("chkGTASA"));
    gGameVC = Wizard.IsCheckboxChecked(_T("chkGTAVC"));
    gGameIII = Wizard.IsCheckboxChecked(_T("chkGTA3"));
    gPluginName = Wizard.GetTextControlValue(_T("txtPluginName"));
    gClassName = Wizard.GetTextControlValue(_T("txtClassName"));
    gCleoPlugin = Wizard.IsCheckboxChecked(_T("chkCleoPlugin"));
    gCleoSDK = Wizard.IsCheckboxChecked(_T("chkCleoSdk"));
    gDirectX = Wizard.IsCheckboxChecked(_T("chkUseDirectX"));
    gLACompatibility = Wizard.IsCheckboxChecked(_T("chkLACompatibility"));
    gOutputDirectory = Wizard.GetTextControlValue(_T("txtOutputDirectory"));
    return true;
}

////////////////////////////////////////////////////////////////////////////////
//
// Release settings page
//
////////////////////////////////////////////////////////////////////////////////

function OnLeave_releaseSettings(forward)
{
    gReleaseIncludeDirs = Wizard.GetTextControlValue(_T("txtReleaseAdditionalIncludeDirs"));
    gReleaseLibraryDirs = Wizard.GetTextControlValue(_T("txtReleaseAdditionalLibraryDirs"));
    gReleaseDependencies = Wizard.GetTextControlValue(_T("txtReleaseAdditionalDependencies"));
    gReleaseDefinitions = Wizard.GetTextControlValue(_T("txtReleaseAdditionalPreprocessorDefinitions"));
    return true;
}

////////////////////////////////////////////////////////////////////////////////
//
// Debug settings page
//
////////////////////////////////////////////////////////////////////////////////

function DebugSettingsCopyFromRelease()
{
    Wizard.SetTextControlValue(_T("txtDebugAdditionalIncludeDirs"), gReleaseIncludeDirs);
    Wizard.SetTextControlValue(_T("txtDebugAdditionalLibraryDirs"), gReleaseLibraryDirs);
    Wizard.SetTextControlValue(_T("txtDebugAdditionalDependencies"), gReleaseDependencies);
    Wizard.SetTextControlValue(_T("txtDebugAdditionalPreprocessorDefinitions"), gReleaseDefinitions);
}

function DebugSettingsSwitchComponents(enable)
{
    Wizard.EnableWindow(_T("sttDebugAdditionalIncludeDirs"), enable);
    Wizard.EnableWindow(_T("txtDebugAdditionalIncludeDirs"), enable);
    Wizard.EnableWindow(_T("sttDebugAdditionalLibraryDirs"), enable);
    Wizard.EnableWindow(_T("txtDebugAdditionalLibraryDirs"), enable);
    Wizard.EnableWindow(_T("sttDebugAdditionalDependencies"), enable);
    Wizard.EnableWindow(_T("txtDebugAdditionalDependencies"), enable);
    Wizard.EnableWindow(_T("sttDebugAdditionalPreprocessorDefinitions"), enable);
    Wizard.EnableWindow(_T("txtDebugAdditionalPreprocessorDefinitions"), enable);
}

function OnClick_chkDebugSettingsSameAsRelease()
{
    if (Wizard.IsCheckboxChecked(_T("chkDebugSettingsSameAsRelease")))
    {
        DebugSettingsSwitchComponents(false);
    }
    else
    {
        DebugSettingsSwitchComponents(true);
    }
    DebugSettingsCopyFromRelease();
}

function OnEnter_debugSettings(forward)
{
    if (forward && Wizard.IsCheckboxChecked(_T("chkDebugSettingsSameAsRelease")))
    {
        DebugSettingsCopyFromRelease();
    }
}

function OnLeave_debugSettings(forward)
{
    gDebugSettingsSameAsRelease = Wizard.IsCheckboxChecked(_T("chkDebugSettingsSameAsRelease"));
    gDebugIncludeDirs = Wizard.GetTextControlValue(_T("txtDebugAdditionalIncludeDirs"));
    gDebugLibraryDirs = Wizard.GetTextControlValue(_T("txtDebugAdditionalLibraryDirs"));
    gDebugDependencies = Wizard.GetTextControlValue(_T("txtDebugAdditionalDependencies"));
    gDebugDefinitions = Wizard.GetTextControlValue(_T("txtDebugAdditionalPreprocessorDefinitions"));
    return true;
}

////////////////////////////////////////////////////////////////////////////////
//
// Setup paths page
//
////////////////////////////////////////////////////////////////////////////////

function PathsSetupSwitchComponentsForGame(enable, asiDirCompName, cleoDirCompName, cleoSdkDirCompName)
{
    if (enable)
    {
        local wantsGameDir = gOutputDirectory.Find(_T("$gameoutputdir$")) != -1;
        Wizard.EnableWindow(_T("stt") + cleoDirCompName, gCleoPlugin && wantsGameDir);
        Wizard.EnableWindow(_T("txt") + cleoDirCompName, gCleoPlugin && wantsGameDir);
        Wizard.EnableWindow(_T("stt") + asiDirCompName, !gCleoPlugin && wantsGameDir);
        Wizard.EnableWindow(_T("txt") + asiDirCompName, !gCleoPlugin && wantsGameDir);
        Wizard.EnableWindow(_T("stt") + cleoSdkDirCompName, gCleoSDK);
        Wizard.EnableWindow(_T("txt") + cleoSdkDirCompName, gCleoSDK);
    }
    else
    {
        Wizard.EnableWindow(_T("stt") + cleoDirCompName, false);
        Wizard.EnableWindow(_T("txt") + cleoDirCompName, false);
        Wizard.EnableWindow(_T("stt") + asiDirCompName, false);
        Wizard.EnableWindow(_T("txt") + asiDirCompName, false);
        Wizard.EnableWindow(_T("stt") + cleoSdkDirCompName, false);
        Wizard.EnableWindow(_T("txt") + cleoSdkDirCompName, false);
    }
}

function PathsSetupSwitchDirectX(enable)
{
    Wizard.EnableWindow(_T("sttDirectXSdkDir"), enable);
    Wizard.EnableWindow(_T("txtDirectXSdkDir"), enable);
}

function PathsSetupSwitchRwD3D9(enable)
{
    Wizard.EnableWindow(_T("sttRwD3d9Dir"), enable);
    Wizard.EnableWindow(_T("txtRwD3d9Dir"), enable);
}

function OnLeave_pathsSetup(forward)
{
    gPluginSdkDir = Wizard.GetTextControlValue(_T("txtPluginSdkDir"));
    gAsiPluginsGTASADir = Wizard.GetTextControlValue(_T("txtGtaSaAsiDir"));
    gAsiPluginsGTAVCDir = Wizard.GetTextControlValue(_T("txtGtaVcAsiDir"));
    gAsiPluginsGTA3Dir = Wizard.GetTextControlValue(_T("txtGta3AsiDir"));
    gCleoPluginsGTASADir = Wizard.GetTextControlValue(_T("txtGtaSaCleoDir"));
    gCleoPluginsGTAVCDir = Wizard.GetTextControlValue(_T("txtGtaVcCleoDir"));
    gCleoPluginsGTA3Dir = Wizard.GetTextControlValue(_T("txtGta3CleoDir"));
    gCleoSdkGTASADir = Wizard.GetTextControlValue(_T("txtCleoSdkSaDir"));
    gCleoSdkGTAVCDir = Wizard.GetTextControlValue(_T("txtCleoSdkVcDir"));
    gCleoSdkGTA3Dir = Wizard.GetTextControlValue(_T("txtCleoSdk3Dir"));
    gDirectXDir = Wizard.GetTextControlValue(_T("txtDirectXSdkDir"));
    gRwD3d9Dir = Wizard.GetTextControlValue(_T("txtRwD3d9Dir"));
    return true;
}

function OnEnter_pathsSetup(forward)
{
    PathsSetupSwitchComponentsForGame(gGameSA, _T("GtaSaAsiDir"), _T("GtaSaCleoDir"), _T("CleoSdkSaDir"));
    PathsSetupSwitchComponentsForGame(gGameVC, _T("GtaVcAsiDir"), _T("GtaVcCleoDir"), _T("CleoSdkVcDir"));
    PathsSetupSwitchComponentsForGame(gGameIII, _T("Gta3AsiDir"), _T("Gta3CleoDir"), _T("CleoSdk3Dir"));
    PathsSetupSwitchDirectX(gDirectX);
    PathsSetupSwitchRwD3D9(gDirectX && (gGameVC || gGameIII));
}